apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
type: Opaque
data:
  username: dXNlcm5hbWU=
  password: cGFzc3dvcmQ=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: microservice-config
data:
  DATABASE_HOST: "postgres-service"
  DATABASE_NAME: "appdb"
  DATABASE_PORT: "5432"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: microservice-sa
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: microservice-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: microservice-rb
subjects:
- kind: ServiceAccount
  name: microservice-sa
roleRef:
  kind: Role
  name: microservice-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: microservice
spec:
  replicas: 3
  selector:
    matchLabels:
      app: microservice
  template:
    metadata:
      labels:
        app: microservice
    spec:
      serviceAccountName: microservice-sa
      containers:
      - name: microservice
        image: myrepo/microservice:latest
        ports:
        - containerPort: 8080
        env:
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: username
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: password
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: microservice-config
              key: DATABASE_HOST
        - name: DATABASE_NAME
          valueFrom:
            configMapKeyRef:
              name: microservice-config
              key: DATABASE_NAME
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: microservice-config
              key: DATABASE_PORT
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: microservice-service
spec:
  selector:
    app: microservice
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: ClusterIP
